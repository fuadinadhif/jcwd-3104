// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

enum Role {
  READER
  AUTHOR
  ADMIN
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String
  excerpt       String
  content       String
  image         String
  userId        Int
  price         Decimal
  published     Boolean  @default(false)
  publishedDate DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User         User           @relation(fields: [userId], references: [id])
  CategoryPost CategoryPost[]
  Transaction  Transaction[]
  Voucher      Voucher[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CategoryPost CategoryPost[]
}

model CategoryPost {
  id         Int @id @default(autoincrement())
  postId     Int
  categoryId Int

  Post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  username       String   @unique
  password       String
  email          String   @unique
  emailConfirmed Boolean  @default(false)
  role           Role     @default(READER)
  referralCode   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ConfirmToken ConfirmToken[]
  Post         Post[]
  Wallet       Wallet?
  Point        Point?
  Coupon       Coupon[]
  Transaction  Transaction[]
}

model ConfirmToken {
  id          Int      @id @default(autoincrement())
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      Int

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id      Int     @id @default(autoincrement())
  balance Decimal @default(0)
  userId  Int     @unique

  User User @relation(fields: [userId], references: [id])
}

model Point {
  id      Int @id @default(autoincrement())
  balance Int @default(0)
  // expiredDate DateTime
  // userId      Int
  userId  Int @unique

  User User @relation(fields: [userId], references: [id])
}

model Coupon {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  discountRate Int      @default(10)
  used         Boolean  @default(false)
  userId       Int
  expiredDate  DateTime

  User User @relation(fields: [userId], references: [id])
}

model Voucher {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  discountRate Int
  stock        Int      @default(10)
  postId       Int
  expiredDate  DateTime

  Post Post @relation(fields: [postId], references: [id])
}

model Transaction {
  id     Int     @id @default(autoincrement())
  amount Decimal
  userId Int
  postId Int

  User    User      @relation(fields: [userId], references: [id])
  Post    Post      @relation(fields: [postId], references: [id])
  Receipt Receipt[]
}

model Receipt {
  id            Int      @id @default(autoincrement())
  receiptCode   String
  receiptTotal  Decimal
  transactionId Int
  createdAt     DateTime @default(now())

  Transaction Transaction @relation(fields: [transactionId], references: [id])
}
